;
; File generated by cc65 v 2.19 - Git 71d64a3
;
	.fopt		compiler,"cc65 v 2.19 - Git 71d64a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_on_all
	.import		_pad_poll
	.import		_vram_adr
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_multi_vram_buffer_vert
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_get_ppu_addr
	.export		_bgsplit_nameh
	.export		_palette
	.export		_palettx
	.export		_text
	.export		_texty
	.export		_texto
	.export		_textm
	.export		_textoh
	.export		_textot
	.export		_textop
	.export		_textobb
	.export		_tables
	.export		_table2
	.export		_pad1
	.export		_dummyaddress
	.export		_scroll_x
	.export		_scrolling_
	.export		_address
	.export		_main

.segment	"RODATA"

_bgsplit_nameh:
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palettx:
	.byte	$0F
	.byte	$1C
	.byte	$12
	.byte	$21
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$32
	.byte	$0F
	.byte	$1C
	.byte	$12
	.byte	$21
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$32
_text:
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
_texty:
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
_texto:
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
_textm:
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
_textoh:
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
	.byte	$64
_textot:
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
	.byte	$65
_textop:
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
	.byte	$62
_textobb:
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63

.segment	"BSS"

_tables:
	.res	2,$00
_table2:
	.res	2,$00
_pad1:
	.res	1,$00
_dummyaddress:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scrolling_:
	.res	2,$00
_address:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; tables = TRUE;
;
	ldx     #$00
	lda     #$01
	sta     _tables
	stx     _tables+1
;
; scrolling_ = 0;
;
	txa
	sta     _scrolling_
	sta     _scrolling_+1
;
; vram_adr(NAMETABLE_A);//unpack nametable into VRAM
;
	ldx     #$20
	jsr     _vram_adr
;
; vram_unrle(bgsplit_nameh);
;
	lda     #<(_bgsplit_nameh)
	ldx     #>(_bgsplit_nameh)
	jsr     _vram_unrle
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; pal_bg(palettx); // load the palette, this can be done any time, even with rendering on
;
	lda     #<(_palettx)
	ldx     #>(_palettx)
	jsr     _pal_bg
;
; pal_spr(palettx);    
;
	lda     #<(_palettx)
	ldx     #>(_palettx)
	jsr     _pal_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; scroll_x = 0;
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; if(table2 == 0)
;
L0002:	jsr     decsp1
	lda     _table2
	ora     _table2+1
	jne     L0041
;
; if(scrolling_ == 1 && scroll_x % 8)
;
	lda     _scrolling_+1
	jne     L001F
	lda     _scrolling_
	cmp     #$01
	jne     L001F
	lda     _scroll_x
	and     #$07
	jeq     L001F
;
; if(tables == 0)
;
	lda     _tables
	ora     _tables+1
	jne     L0012
;
; address = get_ppu_addr(tables , scroll_x + 0xff, scroll_y  ); // (char nt, char x, char y);
;
	jsr     decsp2
	lda     _tables
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = scroll_y / 8 ;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	cpx     #$00
	bpl     L000F
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0011
	cmp     #$F9
L0011:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L000F
	lda     #$00
	jmp     L00E4
L000F:	jsr     asrax3
L00E4:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(text, 30 - positioner  , address);
;
	jsr     decsp3
	lda     #<(_text)
	iny
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0012
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0014
	eor     #$80
L0014:	bpl     L0012
;
; address = get_ppu_addr(tables , scroll_x  + 0xff ,  0 );
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(texty, 1 +  positioner , address);
;
	jsr     decsp3
	lda     #<(_texty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_texty)
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(tables == 1)
;
L0012:	lda     _tables+1
	jne     L001F
	lda     _tables
	cmp     #$01
	jne     L001F
;
; address = get_ppu_addr(tables  , scroll_x + 0xff, scroll_y  ); 
;
	jsr     decsp2
	lda     _tables
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = scroll_y / 8 ;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	cpx     #$00
	bpl     L001C
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L001E
	cmp     #$F9
L001E:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L001C
	lda     #$00
	jmp     L00E7
L001C:	jsr     asrax3
L00E7:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(texto, 30 -   positioner , address);
;
	jsr     decsp3
	lda     #<(_texto)
	iny
	sta     (sp),y
	iny
	lda     #>(_texto)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L001F
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0021
	eor     #$80
L0021:	bpl     L001F
;
; address = get_ppu_addr(tables , scroll_x  + 0xff ,  0 );
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(textm, 1 +  positioner , address);
;
	jsr     decsp3
	lda     #<(_textm)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textm)
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(scrolling_ == 2 && scroll_x % 8)
;
L001F:	lda     _scrolling_+1
	jne     L0041
	lda     _scrolling_
	cmp     #$02
	jne     L0041
	lda     _scroll_x
	and     #$07
	jeq     L0041
;
; if(tables == 0)
;
	lda     _tables
	ora     _tables+1
	jne     L0032
;
; address = get_ppu_addr(tables + 1, scroll_x - 0xff , scroll_y ); 
;
	jsr     decsp2
	lda     _tables
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	sec
	sbc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y ) / 8 ;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	cpx     #$00
	bpl     L002F
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0031
	cmp     #$F9
L0031:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L002F
	lda     #$00
	jmp     L00EB
L002F:	jsr     asrax3
L00EB:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(texto, 30 - positioner, address);
;
	jsr     decsp3
	lda     #<(_texto)
	iny
	sta     (sp),y
	iny
	lda     #>(_texto)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0032
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0034
	eor     #$80
L0034:	bpl     L0032
;
; address = get_ppu_addr(tables + 1, scroll_x  - 0xff ,  0 );
;
	jsr     decsp2
	lda     _tables
	clc
	adc     #$01
	iny
	sta     (sp),y
	lda     _scroll_x
	sec
	sbc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(textm, 1 +  positioner , address);
;
	jsr     decsp3
	lda     #<(_textm)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textm)
	sta     (sp),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(tables == 1)
;
L0032:	lda     _tables+1
	jne     L0041
	lda     _tables
	cmp     #$01
	jne     L0041
;
; address = get_ppu_addr(tables - 1, 510 + scroll_x ,scroll_y );
;
	jsr     decsp2
	lda     _tables
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FE
	dey
	sta     (sp),y
	lda     _scroll_y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y ) / 8 ;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	cpx     #$00
	bpl     L003E
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0040
	cmp     #$F9
L0040:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L003E
	lda     #$00
	jmp     L00EE
L003E:	jsr     asrax3
L00EE:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(text, 30 - positioner, address);
;
	jsr     decsp3
	lda     #<(_text)
	iny
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0041
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0043
	eor     #$80
L0043:	bpl     L0041
;
; address = get_ppu_addr(tables - 1, 510 + scroll_x ,  0 );
;
	jsr     decsp2
	lda     _tables
	sec
	sbc     #$01
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FE
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(texty,   positioner , address);
;
	jsr     decsp3
	lda     #<(_texty)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_texty)
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(table2 == 2)
;
L0041:	lda     _table2+1
	jne     L0086
	lda     _table2
	cmp     #$02
	jne     L0086
;
; if(scrolling_ == 1 && scroll_x % 8)
;
	lda     _scrolling_+1
	jne     L0064
	lda     _scrolling_
	cmp     #$01
	jne     L0064
	lda     _scroll_x
	and     #$07
	jeq     L0064
;
; if(tables == 0)
;
	lda     _tables
	ora     _tables+1
	jne     L0058
;
; address = get_ppu_addr(tables,scroll_x + 0xff,scroll_y - 248); // (char nt, char x, char y);
;
	jsr     decsp2
	lda     _tables
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$F8
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y -240) / 8 ;  
;
	lda     _scroll_y
	ldx     _scroll_y+1
	sec
	sbc     #$F0
	bcs     L0053
	dex
L0053:	cpx     #$00
	bpl     L0054
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0056
	cmp     #$F9
L0056:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L0054
	lda     #$00
	jmp     L00F2
L0054:	jsr     asrax3
L00F2:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(texty, 30 - positioner + 1, address);
;
	jsr     decsp3
	lda     #<(_texty)
	iny
	sta     (sp),y
	iny
	lda     #>(_texty)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0058
;
; address = get_ppu_addr(tables , scroll_x + 0xff ,  0  );
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(text,  positioner - 1 , address);
;
	jsr     decsp3
	lda     #<(_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	iny
	lda     (sp),y
	sec
	sbc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(tables == 1)
;
L0058:	lda     _tables+1
	jne     L0064
	lda     _tables
	cmp     #$01
	jne     L0064
;
; address = get_ppu_addr(tables,scroll_x + 0xff,scroll_y - 248); // (char nt, char x, char y);
;
	jsr     decsp2
	lda     _tables
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$F8
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y -240) / 8 ; 
;
	lda     _scroll_y
	ldx     _scroll_y+1
	sec
	sbc     #$F0
	bcs     L005F
	dex
L005F:	cpx     #$00
	bpl     L0060
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0062
	cmp     #$F9
L0062:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L0060
	lda     #$00
	jmp     L00F3
L0060:	jsr     asrax3
L00F3:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(textm, 30 - positioner + 1, address);
;
	jsr     decsp3
	lda     #<(_textm)
	iny
	sta     (sp),y
	iny
	lda     #>(_textm)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	clc
	adc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0064
;
; address = get_ppu_addr(tables , scroll_x + 0xff ,  0  );
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(texto,  positioner - 1 , address);
;
	jsr     decsp3
	lda     #<(_texto)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_texto)
	sta     (sp),y
	iny
	lda     (sp),y
	sec
	sbc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(scrolling_ == 2 && scroll_x % 8)
;
L0064:	lda     _scrolling_+1
	jne     L0086
	lda     _scrolling_
	cmp     #$02
	jne     L0086
	lda     _scroll_x
	and     #$07
	jeq     L0086
;
; if(tables == 0)
;
	lda     _tables
	ora     _tables+1
	jne     L0075
;
; address = get_ppu_addr(tables + 1, scroll_x - 0xff ,scroll_y - 248); 
;
	jsr     decsp2
	lda     _tables
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	sec
	sbc     #$FF
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$F8
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y -240) / 8 ; 
;
	lda     _scroll_y
	ldx     _scroll_y+1
	sec
	sbc     #$F0
	bcs     L0071
	dex
L0071:	cpx     #$00
	bpl     L0072
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0074
	cmp     #$F9
L0074:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L0072
	lda     #$00
	jmp     L00F5
L0072:	jsr     asrax3
L00F5:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(textm, 30 - positioner, address);
;
	jsr     decsp3
	lda     #<(_textm)
	iny
	sta     (sp),y
	iny
	lda     #>(_textm)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0075
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0077
	eor     #$80
L0077:	bpl     L0075
;
; address = get_ppu_addr(tables + 1, scroll_x - 0xff ,0); 
;
	jsr     decsp2
	lda     _tables
	clc
	adc     #$01
	iny
	sta     (sp),y
	lda     _scroll_x
	sec
	sbc     #$FF
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(texto,  positioner - 1 , address);
;
	jsr     decsp3
	lda     #<(_texto)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_texto)
	sta     (sp),y
	iny
	lda     (sp),y
	sec
	sbc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(tables == 1)
;
L0075:	lda     _tables+1
	jne     L0086
	lda     _tables
	cmp     #$01
	jne     L0086
;
; address = get_ppu_addr(tables - 1, 510 + scroll_x ,scroll_y - 248);
;
	jsr     decsp2
	lda     _tables
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FE
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$F8
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = (scroll_y -240) / 8 ;
;
	lda     _scroll_y
	ldx     _scroll_y+1
	sec
	sbc     #$F0
	bcs     L0082
	dex
L0082:	cpx     #$00
	bpl     L0083
	sta     regsave
	stx     regsave+1
	cpx     #$FF
	bne     L0085
	cmp     #$F9
L0085:	jsr     boolult
	lsr     a
	lda     regsave
	ldx     regsave+1
	bcs     L0083
	lda     #$00
	jmp     L00F8
L0083:	jsr     asrax3
L00F8:	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_vert(texty, 30 - positioner, address);
;
	jsr     decsp3
	lda     #<(_texty)
	iny
	sta     (sp),y
	iny
	lda     #>(_texty)
	sta     (sp),y
	lda     #$1E
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(positioner < 30 && scroll_y > 0)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$1E
	bcs     L0086
	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L0088
	eor     #$80
L0088:	bpl     L0086
;
; address = get_ppu_addr(tables - 1, 510 + scroll_x ,0);
;
	jsr     decsp2
	lda     _tables
	sec
	sbc     #$01
	iny
	sta     (sp),y
	lda     _scroll_x
	clc
	adc     #$FE
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_vert(text,  positioner - 1 , address);
;
	jsr     decsp3
	lda     #<(_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	iny
	lda     (sp),y
	sec
	sbc     #$01
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_vert
;
; if(scrolling_ == 3 && scroll_y % 8)
;
L0086:	lda     _scrolling_+1
	jne     L00FB
	lda     _scrolling_
	cmp     #$03
	jne     L00FB
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	jeq     L0108
;
; if(tables == 1)
;
	lda     _tables+1
	jne     L00A2
	lda     _tables
	cmp     #$01
	jne     L00A2
;
; if(table2 == 0)
;
	lda     _table2
	ora     _table2+1
	jne     L009A
;
; address = get_ppu_addr(table2 + 2,   scroll_x , scroll_y - 239 - 17); 
;
	jsr     decsp2
	lda     _table2
	clc
	adc     #$02
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = 32 - scroll_x / 8;
;
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_horz(textot, positioner, address);
;
	jsr     decsp3
	lda     #<(_textot)
	iny
	sta     (sp),y
	iny
	lda     #>(_textot)
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(positioner < 32)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$20
	bcs     L009A
;
; address = get_ppu_addr(tables,   0, scroll_y - 239 - 17); 
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz(textobb, 1 + 32 - positioner, address); //nametable b partial load
;
	jsr     decsp3
	lda     #<(_textobb)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textobb)
	sta     (sp),y
	lda     #$21
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(table2 == 2)
;
L009A:	lda     _table2+1
	jne     L00A2
	lda     _table2
	cmp     #$02
	jne     L00A2
;
; address = get_ppu_addr(table2 - 2,  scroll_x , scroll_y - 239 - 17); 
;
	jsr     decsp2
	lda     _table2
	sec
	sbc     #$02
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = 32 - scroll_x / 8;
;
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_horz(textoh, 32 - scroll_x / 8, address);
;
	jsr     decsp3
	lda     #<(_textoh)
	iny
	sta     (sp),y
	iny
	lda     #>(_textoh)
	sta     (sp),y
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(positioner < 32)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$20
	bcs     L00A2
;
; address = get_ppu_addr(tables ,   0, scroll_y - 239 - 17);
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz(textop, 1+ 32 - positioner, address); //nametable b partial load
;
	jsr     decsp3
	lda     #<(_textop)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textop)
	sta     (sp),y
	lda     #$21
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(tables == 0)
;
L00A2:	lda     _tables
	ora     _tables+1
	jne     L00FB
;
; if(table2 == 0)
;
	lda     _table2
	ora     _table2+1
	jne     L00AE
;
; address = get_ppu_addr(table2 + 1,  scroll_x , scroll_y - 239 - 17); 
;
	jsr     decsp2
	lda     _table2
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = 32 - (scroll_x - 254)/ 8;
;
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$FE
	bcs     L00AC
	dex
L00AC:	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_horz(textobb, 32 - (scroll_x - 254)/ 8, address);
;
	jsr     decsp3
	lda     #<(_textobb)
	iny
	sta     (sp),y
	iny
	lda     #>(_textobb)
	sta     (sp),y
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$FE
	bcs     L00AD
	dex
L00AD:	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(positioner < 32)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$20
	bcs     L00AE
;
; address = get_ppu_addr(tables ,   0, scroll_y - 239 - 17);
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz(textot, 1+ 32 - positioner, address); //nametable b partial load
;
	jsr     decsp3
	lda     #<(_textot)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textot)
	sta     (sp),y
	lda     #$21
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(table2 == 2)
;
L00AE:	lda     _table2+1
	jne     L00FB
	lda     _table2
	cmp     #$02
	jne     L00FB
;
; address = get_ppu_addr(table2 - 1,  scroll_x  , scroll_y - 239 - 17); 
;
	jsr     decsp2
	lda     _table2
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _scroll_x
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; positioner = 32 - (scroll_x - 254)/ 8;
;
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$FE
	bcs     L00B6
	dex
L00B6:	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
;
; multi_vram_buffer_horz(textop, 32 - (scroll_x - 254)/ 8, address);
;
	jsr     decsp3
	lda     #<(_textop)
	iny
	sta     (sp),y
	iny
	lda     #>(_textop)
	sta     (sp),y
	lda     #$20
	jsr     pusha0
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$FE
	bcs     L00B7
	dex
L00B7:	jsr     shrax3
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; if(positioner < 32)
;
	ldy     #$00
	lda     (sp),y
	cmp     #$20
	bcs     L00FB
;
; address = get_ppu_addr(tables ,   0, scroll_y - 239 - 17);
;
	jsr     decsp2
	lda     _tables
	iny
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _scroll_y
	sec
	sbc     #$EF
	sec
	sbc     #$11
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; multi_vram_buffer_horz(textoh, 1+ 32 - positioner, address); //nametable b partial load
;
	jsr     decsp3
	lda     #<(_textoh)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_textoh)
	sta     (sp),y
	lda     #$21
	sec
	iny
	sbc     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _address
	ldx     _address+1
	jsr     _multi_vram_buffer_horz
;
; pad1 = pad_poll(0); 
;
L00FB:	lda     #$00
L0108:	jsr     _pad_poll
	sta     _pad1
;
; scrolling_ = 0;
;
	ldx     #$00
	txa
	sta     _scrolling_
	sta     _scrolling_+1
;
; if (pad1 & PAD_RIGHT && scrolling_ == 0) 
;
	lda     _pad1
	and     #$01
	beq     L0100
	lda     _scrolling_
	ora     _scrolling_+1
	bne     L0100
;
; scrolling_ = 1;
;
	lda     #$01
	sta     _scrolling_
	stx     _scrolling_+1
;
; if(scroll_x <= 510)
;
	lda     _scroll_x+1
	cmp     #$01
	bne     L00C1
	lda     _scroll_x
	cmp     #$FF
L00C1:	bcs     L00C0
;
; scroll_x += 1;
;
	inc     _scroll_x
	bne     L00C0
	inc     _scroll_x+1
;
; if(scroll_x > 510)
;
L00C0:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$01
	bcc     L00C3
;
; scroll_x = 0;
;
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; if(scroll_x <= 0xff)
;
L00C3:	ldx     _scroll_x+1
	cpx     #$01
	bcs     L00C4
;
; tables = TRUE;
;
	ldx     #$00
	lda     #$01
	sta     _tables
	stx     _tables+1
;
; if(scroll_x > 0xff)
;
L00C4:	lda     _scroll_x
	cmp     #$00
	lda     _scroll_x+1
	sbc     #$01
	bcc     L00C5
;
; tables = FALSE;
;
	lda     #$00
	sta     _tables
	sta     _tables+1
;
; set_scroll_x(scroll_x);
;
L00C5:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if (pad1 & PAD_LEFT  && scrolling_ == 0) 
;
L0100:	lda     _pad1
	and     #$02
	beq     L0104
	lda     _scrolling_
	ora     _scrolling_+1
	bne     L0104
;
; scrolling_ = 2;
;
	tax
	lda     #$02
	sta     _scrolling_
	stx     _scrolling_+1
;
; if(scroll_x == 0)
;
	lda     _scroll_x
	ora     _scroll_x+1
	bne     L00CB
;
; scroll_x = 511;
;
	inx
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; if(scroll_x > 0)
;
L00CB:	lda     _scroll_x
	ora     _scroll_x+1
	beq     L00CD
;
; scroll_x -= 1;
;
	lda     _scroll_x
	sec
	sbc     #$01
	sta     _scroll_x
	bcs     L00CD
	dec     _scroll_x+1
;
; if(scroll_x <= 255)
;
L00CD:	ldx     _scroll_x+1
	cpx     #$01
	bcs     L00D0
;
; tables = TRUE;
;
	ldx     #$00
	lda     #$01
	sta     _tables
	stx     _tables+1
;
; if(scroll_x > 255)
;
L00D0:	lda     _scroll_x
	cmp     #$00
	lda     _scroll_x+1
	sbc     #$01
	bcc     L00D1
;
; tables = FALSE;
;
	lda     #$00
	sta     _tables
	sta     _tables+1
;
; set_scroll_x(scroll_x);
;
L00D1:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if (pad1 & PAD_DOWN  && scrolling_ == 0) 
;
L0104:	lda     _pad1
	and     #$04
	jeq     L00D2
	lda     _scrolling_
	ora     _scrolling_+1
	jne     L00D2
;
; scrolling_ = 3;
;
	sta     _scrolling_+1
	lda     #$03
	sta     _scrolling_
;
; if(scroll_y <= 479)
;
	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	bvc     L00D8
	eor     #$80
L00D8:	bpl     L00D7
;
; scroll_y = add_scroll_y(1, scroll_y);
;
	lda     #$01
	jsr     pusha
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _add_scroll_y
	sta     _scroll_y
	stx     _scroll_y+1
;
; if(scroll_y > 479)
;
L00D7:	lda     _scroll_y
	cmp     #$E0
	lda     _scroll_y+1
	sbc     #$01
	bvs     L00DA
	eor     #$80
L00DA:	bpl     L00D9
;
; scroll_y = -32;
;
	ldx     #$FF
	lda     #$E0
	sta     _scroll_y
	stx     _scroll_y+1
;
; if(scroll_y >= 239 + 18)
;
L00D9:	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$01
	bvs     L00DC
	eor     #$80
L00DC:	bpl     L00DD
;
; if(scroll_y <= 479 - 12)
;
	lda     _scroll_y
	cmp     #$D4
	lda     _scroll_y+1
	sbc     #$01
	bvc     L00DE
	eor     #$80
L00DE:	bpl     L00DD
;
; table2 = 2;
;
	ldx     #$00
	lda     #$02
	sta     _table2
	stx     _table2+1
;
; if(scroll_y > 0)// && scroll_y > 4)
;
L00DD:	lda     _scroll_y
	cmp     #$01
	lda     _scroll_y+1
	sbc     #$00
	bvs     L00E0
	eor     #$80
L00E0:	bpl     L00E1
;
; if(scroll_y < 239 + 12)
;
	lda     _scroll_y
	cmp     #$FB
	lda     _scroll_y+1
	sbc     #$00
	bvc     L00E2
	eor     #$80
L00E2:	bpl     L00E1
;
; table2 = 0;
;
	lda     #$00
	sta     _table2
	sta     _table2+1
;
; set_scroll_y(scroll_y);
;
L00E1:	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; ppu_wait_nmi(); // waits till nmi, and push new updates to the ppu
;
L00D2:	jsr     _ppu_wait_nmi
;
; }
;
	jsr     incsp1
;
; while (1){
;
	jmp     L0002

.endproc

